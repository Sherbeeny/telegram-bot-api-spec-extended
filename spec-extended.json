{
  "version": "Bot API 9.1",
  "release_date": "July 3, 2025",
  "changelog": "https://core.telegram.org/bots/api#july-3-2025",
  "methods": {},
  "types": {},
  "faq": {
    "how-do-i-create-a-bot": {
      "question": "How do I create a bot?",
      "answer": "Creating Telegram bots is super-easy, but you will need at least some skills at computer programming. In order for a bot to work, set up a bot account with @BotFather, then connect it to your backend server via our API.\nUnfortunately, there are no out-of-the-box ways to create a working bot if you are not a developer. But we're sure you'll soon find plenty of bots created by other people to play with.",
      "ref": {
        "url": "https://core.telegram.org/bots/faq#general-questions",
        "text": "How do I create a bot?"
      }
    },
    "i-39m-a-developer-where-can-i-find-some-examples": {
      "question": "I'm a developer. Where can I find some examples?",
      "answer": "Here are two sample bots, both written in PHP:\n\nHello Bot demonstrates the basics of the Telegram bot API.\nSimple Poll bot is a more complete example, it supports both long-polling and Webhooks for updates.\n\n\nMany members of our community are building bots and publishing sources.We're collecting them on this page \u00bb\n\nPing us on @BotSupport if you've built a bot and would like to share it with others.",
      "ref": {
        "url": "https://core.telegram.org/bots/faq#how-do-i-create-a-bot",
        "text": "I'm a developer. Where can I find some examples?"
      }
    },
    "will-you-add-x-to-the-bot-api": {
      "question": "Will you add X to the Bot API?",
      "answer": "The bot API is still pretty young. There are many potential features to consider and implement. We'll be studying what people do with their bots for a while to see which directions will be most important for the platform.\nAll bot developers are welcome to share ideas for our Bot API with our @BotSupport account.",
      "ref": {
        "url": "https://core.telegram.org/bots/faq#i-39m-a-developer-where-can-i-find-some-examples",
        "text": "Will you add X to the Bot API?"
      }
    },
    "what-messages-will-my-bot-get": {
      "question": "What messages will my bot get?",
      "answer": "1. All bots, regardless of settings, will receive:\n\nAll service messages.\nAll messages from private chats with users.\nAll messages from channels where they are a member.\n\n2. Bot admins and bots with privacy mode disabled will receive all messages except messages sent by other bots.\n3. Bots with privacy mode enabled will receive:\n\nCommands explicitly meant for them (e.g., /command@this_bot).\nGeneral commands from users (e.g. /start) if the bot was the last bot to send a message to the group.\nMessages sent via this bot.\nReplies to any messages implicitly or explicitly meant for this bot.\n\nNote that each particular message can only be available to one privacy-enabled bot at a time, i.e., a reply to bot A containing an explicit command for bot B or sent via bot C will only be available to bot A. Replies have the highest priority.",
      "ref": {
        "url": "https://core.telegram.org/bots/faq#will-you-add-x-to-the-bot-api",
        "text": "What messages will my bot get?"
      }
    },
    "why-doesn-39t-my-bot-see-messages-from-other-bots": {
      "question": "Why doesn't my bot see messages from other bots?",
      "answer": "Bots talking to each other could potentially get stuck in unwelcome loops. To avoid this, we decided that bots will not be able to see messages from other bots regardless of mode.\nGetting Updates",
      "ref": {
        "url": "https://core.telegram.org/bots/faq#what-messages-will-my-bot-get",
        "text": "Why doesn't my bot see messages from other bots?"
      }
    },
    "how-do-i-get-updates": {
      "question": "How do I get updates?",
      "answer": "There are currently two ways of getting updates. You can either use long polling or Webhooks. Please note that it's not possible to get updates via long polling while an outgoing Webhook is set.",
      "ref": {
        "url": "https://core.telegram.org/bots/faq#getting-updates",
        "text": "How do I get updates?"
      }
    },
    "long-polling-gives-me-the-same-updates-again-and-again": {
      "question": "Long polling gives me the same updates again and again!",
      "answer": "The getUpdates method returns the earliest 100 unconfirmed updates. To confirm an update, use the offset parameter when calling getUpdates like this:\noffset = update_id of last processed update + 1\nAll updates with update_id less than or equal to offset will be marked as confirmed on the server and will no longer be returned.",
      "ref": {
        "url": "https://core.telegram.org/bots/faq#how-do-i-get-updates",
        "text": "Long polling gives me the same updates again and again!"
      }
    },
    "i-39m-having-problems-with-webhooks": {
      "question": "I'm having problems with Webhooks.",
      "answer": "If you've set up your webhook successfully, but are not getting any updates, please remember:\n\nYou need a valid SSL certificate for webhooks to work.\nTo use a self-signed certificate, you need to upload your public key certificate using the certificate parameter in setWebhook. Please upload as InputFile, sending a String will not work.\nPorts currently supported for Webhooks: 443, 80, 88, 8443.\nWildcard certificates may not be supported.\nRedirects are not supported.\nCN must exactly match your domain.\n\n\nPlease check out this new WEBHOOK GUIDE to learn all there is to know about webhooks!",
      "ref": {
        "url": "https://core.telegram.org/bots/faq#long-polling-gives-me-the-same-updates-again-and-again",
        "text": "I'm having problems with Webhooks."
      }
    },
    "i-39m-having-trouble-with-my-self-signed-certificate": {
      "question": "I'm having trouble with my self-signed certificate!",
      "answer": "Please take a look at this self-signed certificate guide we made just for you. If you've read it and still have a question, ping us on botsupport.",
      "ref": {
        "url": "https://core.telegram.org/bots/faq#i-39m-having-problems-with-webhooks",
        "text": "I'm having trouble with my self-signed certificate!"
      }
    },
    "how-can-i-make-sure-that-webhook-requests-are-coming-from-telegr": {
      "question": "How can I make sure that Webhook requests are coming from Telegram?",
      "answer": "If you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL you give us, e.g. www.example.com/your_token. Since nobody else knows your bot's token, you can be pretty sure it's us.",
      "ref": {
        "url": "https://core.telegram.org/bots/faq#i-39m-having-trouble-with-my-self-signed-certificate",
        "text": "How can I make sure that Webhook requests are coming from Telegram?"
      }
    },
    "how-can-i-make-requests-in-response-to-updates": {
      "question": "How can I make requests in response to updates?",
      "answer": "This is possible if you're using webhooks. The upside is that you need less requests, the downside \u2014 that in this case it's not possible to know that such a request was successful or get its result. \nWhenever you receive a webhook update, you have two options:\n1. Issue POST to https://api.telegram.org/bot<token>/method\n\n\n\n2. Reply directly and give method as JSON payload in the reply\n\n\n\nYou may also want to look at our sample HelloBot, it offers a PHP implementation of this.\n\nHandling Media",
      "ref": {
        "url": "https://core.telegram.org/bots/faq#how-can-i-make-sure-that-webhook-requests-are-coming-from-telegr",
        "text": "How can I make requests in response to updates?"
      }
    },
    "how-do-i-download-files": {
      "question": "How do I download files?",
      "answer": "Use the getFile method. Please note that this will only work with files of up to 20 MB in size.",
      "ref": {
        "url": "https://core.telegram.org/bots/faq#handling-media",
        "text": "How do I download files?"
      }
    },
    "how-do-i-upload-a-large-file": {
      "question": "How do I upload a large file?",
      "answer": "Bots can currently send files of any type of up to 50 MB in size, so yes, very large files won't work for now. Sorry. This limit may be changed in the future.",
      "ref": {
        "url": "https://core.telegram.org/bots/faq#how-do-i-download-files",
        "text": "How do I upload a large file?"
      }
    },
    "can-i-count-on-file-ids-to-be-persistent": {
      "question": "Can I count on file_ids to be persistent?",
      "answer": "Yes, file_ids can be treated as persistent.\nBroadcasting to Users",
      "ref": {
        "url": "https://core.telegram.org/bots/faq#how-do-i-upload-a-large-file",
        "text": "Can I count on file_ids to be persistent?"
      }
    },
    "my-bot-is-hitting-limits-how-do-i-avoid-this": {
      "question": "My bot is hitting limits, how do I avoid this?",
      "answer": "By default, bots are able to message their users at no cost \u2013 but have limitations on the number of messages they can broadcast in a single interval:\n\nIn a single chat, avoid sending more than one message per second. We may allow short bursts that go over this limit, but eventually you'll begin receiving 429 errors.\nIn a group, bots are not be able to send more than 20 messages per minute.\nFor bulk notifications, bots are not able to broadcast more than about 30 messages per second, unless they enable paid broadcasts to increase the limit.",
      "ref": {
        "url": "https://core.telegram.org/bots/faq#broadcasting-to-users",
        "text": "My bot is hitting limits, how do I avoid this?"
      }
    },
    "how-can-i-message-all-of-my-bot-39s-subscribers-at-once": {
      "question": "How can I message all of my bot's subscribers at once?",
      "answer": "Enabling paid broadcasts in @BotFather allows a bot to broadcast up to 1000 messages per second. Each message broadcasted over the free amount of 30 per second incurs a cost of 0.1 Stars per message, paid with Telegram Stars from the bot's balance. In order to enable this feature, a bot must have at least 100,000 Stars on its balance and at least 100,000 monthly active users.\n\nBots with increased limits are only charged for messages that are broadcasted successfully.\n\nIf you do not wish to enable paid broadcasts, consider spreading them over longer intervals (e.g. 8-12 hours) to avoid hitting the limit. The API will not allow bulk notifications to more than ~30 users per second \u2013 if you go over that, you'll start getting 429 errors.\n\n\nIf you've got questions that are not answered on this page, ping us at @BotSupport in Telegram.We welcome any suggestions for the Bot Platform and API.",
      "ref": {
        "url": "https://core.telegram.org/bots/faq#my-bot-is-hitting-limits-how-do-i-avoid-this",
        "text": "How can I message all of my bot's subscribers at once?"
      }
    }
  },
  "features": {
    "commands": {
      "title": "Commands",
      "description": "A command is a simple /keyword that tells the bot what to do. Telegram apps will:\n\nHighlight commands in messages. When the user taps a highlighted command, that command is immediately sent again.\nSuggest a list of supported commands with descriptions when the user enters a / (for this to work, you need to have provided a list of commands to @BotFather or via the appropriate API method). Selecting a command from the list immediately sends it.\nShow a menu button containing all or some of a bot\u2019s commands (which you set via @BotFather).\n\nCommands must always start with the / symbol and contain up to 32 characters. They can use Latin letters, numbers and underscores, though simple lowercase text is recommended for a cleaner look. \nHere are a few examples:\n\n/next \n/cancel \n/newlocation \n/newrule \n\nCommands should be as specific as possible \u2013 for example /newlocation or /newrule is better than a /new command that then requires an additional parameter from the user like \"location\u201c or \u201drule\".\n\n\n\n\nWe require all developers to support several Global Commands to make sure Telegram bots offer a consistent and user-friendly experience.\n\nCommand Scopes\nYour bot is able to show different commands to different users and groups \u2013 you can control this using scopes. For example, your bot could show additional commands to group admins or translate the list based on the user\u2019s language_code.\n\nKeep in mind that Bot API updates will not contain any information about the scope of a command sent by the user \u2013 in fact, they may contain commands that don\u2019t exist at all in your bot. Your backend should always verify that received commands are valid and that the user was authorized to use them regardless of scope.\nBots with privacy mode enabled will only receive commands in groups under special conditions, see here.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#inputs",
        "text": "Commands"
      }
    },
    "keyboards": {
      "title": "Keyboards",
      "description": "Bots are able to interpret free text input from users, but offering specific suggestions is often more intuitive \u2013 this is where custom keyboards can be extremely useful.\nWhenever your bot sends a message, it can display a special keyboard with predefined reply options (see ReplyKeyboardMarkup). Telegram apps that receive the message will display your keyboard to the user. Using any of the buttons will immediately send the respective text. This way you can drastically simplify and streamline user interaction with your bot.\n\n\n\n\nCheck out the one_time_keyboard parameter to automatically hide your bot's keyboard as soon as it's been used.\n\nYou can also customize the text placeholder in the input field by setting the input_field_placeholder parameter.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#commands",
        "text": "Keyboards"
      }
    },
    "inline-keyboards": {
      "title": "Inline Keyboards",
      "description": "There are times when you'd prefer to do things without sending any messages to the chat \u2013 like when a user is changing settings, toggling options or navigating search results. In such cases, you can use Inline Keyboards that are shown directly below their relevant messages.\nUnlike with custom reply keyboards, pressing buttons on inline keyboards doesn't send messages to the chat. Instead, inline keyboards support buttons that can work behind the scenes or open different interfaces: callback buttons, URL buttons, switch-to-inline buttons, game buttons and payment buttons. \n\n\n\n\nTo provide a better user experience, consider editing your keyboard when the user toggles a setting button or navigates to a new page \u2013 this is both faster and smoother than sending a whole new message and deleting the previous one.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#keyboards",
        "text": "Inline Keyboards"
      }
    },
    "menu-button": {
      "title": "Menu Button",
      "description": "In all bot chats, a menu button appears near the message field. By default, tapping this button opens a menu that can hold some or all of a bot's commands, including a short description for each. Users can then select a command from the menu without needing to type it out.\nYou can set different texts of the menu button and its command descriptions for various individual users or groups of users \u2013 for example, showing translated text based on the user\u2019s language, as explained here.\n\n\n\n\n\nThe menu button can alternatively be used to launch a Web App.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#inline-keyboards",
        "text": "Menu Button"
      }
    },
    "global-commands": {
      "title": "Global Commands",
      "description": "To make basic interactions more uniform, we ask all developers to support a few basic commands. Telegram apps will have interface shortcuts for these commands.\n\n/start - begins the interaction with the user, like sending an introductory message. This command can also be used to pass additional parameters to the bot (see Deep Linking).\n/help - returns a help message, like a short text about what your bot can do and a list of commands.\n/settings - (if applicable) shows the bot's settings for this user and suggests commands to edit them.\n\nUsers will see a Start button the first time they open a chat with your bot. Help and Settings links will be available in the menu on the bot's profile page if you add them in @BotFather.\nChat and User Selection\nBots can present the user with a friendly and intuitive interface that lists any number of groups, channels or other users according to a custom set of criteria. Tapping on a chat will send its identifier to the bot in a service message and seamlessly close the interface.\nA group management bot is the perfect example: an admin could select a chat the bot should manage, and then select a user it should promote \u2013 this would happen without ever typing any text.\nHere is a quick start guide to use this feature:\n\nPick a set of criteria and store them in a KeyboardButtonRequestChat object (or KeyboardButtonRequestUser for users).\nCreate a KeyboardButton and store the criteria under request_chat or request_user respectively.\nSend a ReplyKeyboardMarkup that contains the button you just created.\nWhen the user selects a chat, you'll receive its identifier in a chat_shared or user_shared service message.\n\n\nlink\n  \n\n\n\nKeep in mind that the bot may not be able to use the identifier it receives if the corresponding chat or user is not already known or accessible by some other means.\n\n\nInteractions\nIn addition to sending commands and messages to the chat with the bot, there are several ways of interacting with them without opening any specific chat or group.\n\nInline mode allows sending requests to bots right from the input field \u2013 from any chat on Telegram.\nDeep linking allows special links that send certain parameters to the bot when opened.\nAttachment menu integration makes it possible to use bots from the attachment menu in chats.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#menu-button",
        "text": "Global Commands"
      }
    },
    "inline-requests": {
      "title": "Inline Requests",
      "description": "Users can interact with your bot via inline queries straight from the message field in any chat. All they need to do is start a message with your bot's @username and enter a keyword.\nHaving received the query, your bot can return some results. As soon as the user selects one, it is sent to the relevant chat. This way, people can request and send content from your bot in any of their chats, groups or channels.\nRemember that inline functionality has to be enabled via @BotFather, or your bot will not receive inline Updates.\n\n\n\n\nExamples of inline bots include @gif, @bing and @wiki. Web App bots can also be used inline \u2013 try typing @durgerkingbot in any chat.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#interactions",
        "text": "Inline Requests"
      }
    },
    "deep-linking": {
      "title": "Deep Linking",
      "description": "Telegram bots have a deep linking mechanism that allows additional parameters to be passed to the bot on startup. It could be a command that launches the bot \u2013 or an authentication token to connect the user's Telegram account to their account on another platform.\nEach bot has a link that opens a conversation with it in Telegram \u2013 https://t.me/<bot_username>. Parameters can be added directly to this link to let your bot work with additional information on the fly, without any user input.\n\nA-Z, a-z, 0-9, _ and - are allowed. We recommend using base64url to encode parameters with binary and other types of content. The parameter can be up to 64 characters long.\n\nPrivate ChatsIn private chats, you can use the start parameter to automatically pass any value to your bot whenever a user presses the link. For example, you could use:\nhttps://t.me/your_bot?start=airplane\nWhen someone opens a chat with your bot via this link, you will receive:\n/start airplane\nGroupsIn groups, you can add the parameter startgroup to this link. For example:\nhttps://t.me/your_bot?startgroup=spaceship\nFollowing a link with this parameter prompts the user to select a group to add the bot to \u2013 the resulting update will contain text in the form:\n/start@your_bot spaceship\n\nWeb Apps also support deep linking, for more information check out our dedicated guide.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#inline-requests",
        "text": "Deep Linking"
      }
    },
    "attachment-menu": {
      "title": "Attachment Menu",
      "description": "Certain bots can be added directly to a user\u2019s attachment menu \u2013 giving them easy access to the bot in any chat. Currently, this option is restricted to certain approved bots, but may be expanded later.\n\n\n\n\n\n\nTry adding @DurgerKingBot to your attachment menu.\n\n\nIntegration\nThere are various ways of further integrating bots with Telegram and other services.\n\nUse Web Apps to replace any website.\nBuild tools and integrate business services.\nAccept Payments via third-party payment providers that support integration with Bots and Mini Apps.\nConnect to Telegram using the Web Login functionality.\nCreate gaming bots by integrating HTML5 Games.\nHelp users create and manage Telegram Stickers.\n\nMonetization\nTelegram offers a robust ecosystem of monetization features, allowing any bot to support its development with multiple revenue streams.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#deep-linking",
        "text": "Attachment Menu"
      }
    },
    "telegram-stars": {
      "title": "Telegram Stars",
      "description": "Telegram Stars power all digital transactions between bots and users. Users can acquire Stars through in-app purchases via Apple and Google or via @PremiumBot.\nBots can use the Stars they receive to increase message limits, send gifts to users or accept rewards in Toncoin.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#monetization",
        "text": "Telegram Stars"
      }
    },
    "digital-products": {
      "title": "Digital Products",
      "description": "Services can use their bot to sell digital goods and services \u2013 like online courses, commissioned artwork and items in games.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#telegram-stars",
        "text": "Digital Products"
      }
    },
    "paid-media": {
      "title": "Paid Media",
      "description": "Bots can post paid photos and videos \u2013 and users are only allowed to view the media after paying to unlock it. This functionality is available to all bots \u2013 including bot admins in channels and bots managing Telegram Business accounts.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#digital-products",
        "text": "Paid Media"
      }
    },
    "subscription-plans": {
      "title": "Subscription Plans",
      "description": "Developers are able to offer paid subscriptions to their bot \u2013 adding multiple tiers of content and features tailored to their audience.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#paid-media",
        "text": "Subscription Plans"
      }
    },
    "revenue-sharing-from-telegram-ads": {
      "title": "Revenue Sharing from Telegram Ads",
      "description": "Developers can participate in revenue sharing from Telegram Ads \u2013 receiving 50% of the revenue from ads that appear in the chat with their bot.\n\n\n\n\n\nMini Apps\nMini Apps allow developers to create infinitely flexible interfaces that can be launched right inside Telegram \u2013 integrating seamlessly with the app and replacing any website.\nIf your bot is a mini app, you can add a prominent Launch app button as well as demo videos and screenshots to the bot\u2019s profile. To do this, go to @BotFather and set up your bot's Main Mini App.\n\nMini apps are covered in detail in our dedicated guide \u2013 you should read it carefully to learn the wide variety of features they can offer.\n\n\n\n\n\n\nIf you develop a mini app, be sure to follow our design guidelines \u2013 you'll want your custom interface to seamlessly integrate into the app to provide users the best possible experience.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#subscription-plans",
        "text": "Revenue Sharing from Telegram Ads"
      }
    },
    "seamless-integration-with-telegram": {
      "title": "Seamless Integration With Telegram",
      "description": "Mini apps integrate seamlessly with Telegram \u2013 from receiving detailed theme settings to using native dialogs for reading QR codes, controlling biometrics, sharing media directly to stories and more.\nWhen opened from a direct link in a group, mini apps can also use the chat_instance parameter to track of the current context, supporting shared usage by multiple chat members \u2013 to create live whiteboards, group orders, multiplayer games and much more.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#mini-apps",
        "text": "Seamless Integration With Telegram"
      }
    },
    "mini-app-previews": {
      "title": "Mini App Previews",
      "description": "Developers can upload screenshots and video demos of their mini app right from the bot's profile page \u2013 giving users an overview of the app's features and functionality. These media previews will be shown to any user who views your app \u2013 like in the Mini App Store or via Search.\n\n\n\n\nPreviews support multiple languages \u2013 so you can upload translated versions of your previews that will be shown to users based on their app language.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#seamless-integration-with-telegram",
        "text": "Mini App Previews"
      }
    },
    "mini-app-store": {
      "title": "Mini App Store",
      "description": "More than 500 million out of Telegram's 950 million users interact with mini apps every month. Successful mini apps have the chance to be highlighted in the Telegram Mini App Store \u2013 appearing for all users in the 'Apps' tab of Search.\nFeatured mini apps are chosen based on how they enrich the Telegram ecosystem. To increase the chances of being featured, you must enable the Main Mini App in @BotFather, upload high-quality media demos showcasing your app to your bot's profile and accept payments in Telegram Stars.\n\n\n\n\n\n\nCheck out our documentation to learn more about enabling Main Mini Apps and accepting payments in Stars.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#mini-app-previews",
        "text": "Mini App Store"
      }
    },
    "home-screen-shortcuts": {
      "title": "Home Screen Shortcuts",
      "description": "Users can place direct shortcuts to specific mini apps on the home screen of their devices \u2013 accessing their favorite games and services in one tap.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#mini-app-store",
        "text": "Home Screen Shortcuts"
      }
    },
    "customizable-loading-screens": {
      "title": "Customizable Loading Screens",
      "description": "The loading screen of mini apps can be customized in @Botfather \u2013 where developers can add their own icon and set specific colors for both light and dark themes.\n\n\n\n\n\n\n\nTo customize your loading screen, go to @Botfather > /mybots > Select bot > Bot Settings > Configure Mini App > Configure Splash Screen. You can tap on Open Splash Screen Preview to see the final result.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#home-screen-shortcuts",
        "text": "Customizable Loading Screens"
      }
    },
    "full-screen-mode": {
      "title": "Full-Screen Mode",
      "description": "Mini apps are able to use the entire screen in portrait or landscape orientation \u2013 allowing for immersive games and media with expanded gestures and interfaces.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#customizable-loading-screens",
        "text": "Full-Screen Mode"
      }
    },
    "setting-emoji-status": {
      "title": "Setting Emoji Status",
      "description": "Users can set an emoji status inside mini apps or give an app permission to update it automatically.\nDevelopers can also integrate APIs from other services or request geolocation access \u2013 instantly changing a user's status when they start a game  or leave the office .",
      "ref": {
        "url": "https://core.telegram.org/bots/features#full-screen-mode",
        "text": "Setting Emoji Status"
      }
    },
    "sharing-media": {
      "title": "Sharing Media",
      "description": "Media generated in mini apps can be shared in any chat \u2013 letting users effortlessly send referral codes and custom images to contacts, groups and channels. Alternatively, users can download it with a native popup.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#setting-emoji-status",
        "text": "Sharing Media"
      }
    },
    "sharing-from-mini-apps-to-stories": {
      "title": "Sharing from Mini Apps to Stories",
      "description": "Any media created by the mini app, like whiteboard snapshots, leaderboards and AI-generated videos can be opened with the native story editor via the shareToStory method \u2013 for users to share as a Telegram Story right from the mini app.\n\n\n\n\n\n\nMini apps also receive a number of events, allowing them to instantly react to actions by the user. You can learn more about which events are available here.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#sharing-media",
        "text": "Sharing from Mini Apps to Stories"
      }
    },
    "geolocation-access": {
      "title": "Geolocation Access",
      "description": "Mini apps are able to receive location permissions from users \u2013 giving developers the ability to make location-based games and interactive maps for events.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#sharing-from-mini-apps-to-stories",
        "text": "Geolocation Access"
      }
    },
    "device-motion-tracking": {
      "title": "Device Motion Tracking",
      "description": "Mini Apps can request acceleration, orientation and rotation data from devices in real time \u2013 unlocking support for motion controls and VR experiences.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#geolocation-access",
        "text": "Device Motion Tracking"
      }
    },
    "device-hardware-info": {
      "title": "Device Hardware Info",
      "description": "A user's device can send basic hardware info to mini apps, such as its processing power and memory capacity. Mini apps can then use this to optimize graphics and automatically adjust settings for the smoothest experience.\nBots for Business\nBots can enable Business Mode, allowing Telegram Business subscribers to connect them to their account \u2013 streamlining and automating private chat management and interactions with their clients.\nThe account owner can specify which chats your bot can access \u2013 within those chats, the bot will receive all updates normally supported by the Bot API, except messages sent by itself and other bots. Depending on the business connection settings, your bot may also be able to send messages and do other actions on behalf of the account owner in chats that were active in the last 24h.\nHere is a quick start guide to integrate your bot with Telegram Business:\n\nEnable Business Mode for your bot in @BotFather.\nHandle incoming BusinessConnection updates, signaling that a user has established, edited or ended a Business Connection with your bot. \nProcess business messages by handling business_message, edited_business_message and deleted_business_messages updates. \nCheck your bot\u2019s write permissions via can_reply in the latest BusinessConnection update.\nIf allowed to, use the business_connection_id field in sendMessage, sendChatAction and other send methods to communicate on behalf of the Business user.\n\nUsers who connect your bot to their account will see a quick action bar at the top of each managed chat \u2013 tapping on \u201cManage Bot\u201d will redirect them to your bot, which will receive a deep link message in the format /start bizChat<user_chat_id>.\n\n\n\n\n\n\nPlease keep in mind that operating bots on Telegram is subject to the Telegram Bot Developer Terms of Service. Specifically, for Telegram Business, make sure you have read and understood Section 5.4.\n\nPayments\n\nIf your bot or mini app sells digital goods and services, be sure to carry out the payment in Telegram Stars by specifying XTR as currency. In compliance with third-party store policies, Telegram does not support the sale of digital goods and services using other currencies.\n\nTelegram bots can accept payments with a sleek, streamlined interface that collects all necessary data from the user. Telegram doesn't collect any payment data \u2013 like the user's credit card information \u2013 and sends it directly to one of the supported third-party payment providers.\nHere is a quick start guide to implement payments:\n\nPick a provider and obtain the proper token as well as a test token from the \"Stripe TEST MODE\" provider.\nImplement payments via the appropriate API methods.\nTest your implementation by using your test token along with a test credit card.\n\nThen, to issue an invoice and process the order flow:\n\nSend an invoice to the user for the goods or services you are offering.\nValidate the order and accept the checkout via answerPreCheckoutQuery.\nConfirm the payment by checking for a successful payment service message.\nShip the goods or provide the services.\n\nFor more details, feel free to check out our full exhaustive guides for selling goods and services on Telegram \u2013 they include live checklists, parameters and in-depth method descriptions:\n\nGuide for digital goods and services\nGuide for physical goods and services\n\n\n\n\n\nTelegram does not directly process the payments, does not store data about orders and does not collect any fees. Invoices are forwarded directly to the third-party payment provider.For this reason, disputes must be solved between the user, the bot developer and the payment provider. You can read more about this in the Privacy Policy.\n\nWeb Login\nTelegram offers a flexible, lightweight and free framework to authenticate users on any website and app. This can be used to bridge your platform with Telegram, providing a smooth experience to your users. You can also freely rely on this framework to implement a fast and signup-free login on your site, regardless of its connection to Telegram.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#device-motion-tracking",
        "text": "Device Hardware Info"
      }
    },
    "widgets": {
      "title": "Widgets",
      "description": "The Telegram login widget is a simple and secure way to authorize users on your website.\n\nChoose a bot \u2013 ideally its name and profile pic should match the website title and logo.\nUse the /setdomain command in @BotFather to pair the bot with your website domain. \nConfigure your widget using our dedicated tool and embed it on your website.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#web-login",
        "text": "Widgets"
      }
    },
    "inline-login": {
      "title": "Inline Login",
      "description": "When users open your website via an inline button, you can use the login_url parameter as an alternative to login widgets. This way, you'll be able to seamlessly authorize them on your website or app before the page even loads.\n\n\n\n\nMake sure to review our guide on authenticating the received data as well as our sample code.\n\nHTML5 Games\nBots can serve as standalone gaming platforms \u2013 with our HTML5 Gaming API you can develop multiplayer or single-player games and let your users have fun comparing ranks, scores and much more.\nTo get started, follow these simple steps:\n\nSend the /newgame command to @BotFather\nProvide a description text, an image or an optional gif to showcase its gameplay\nSend the game to users via the sendGame method or via an inline query\nWhen someone wants to play, you'll receive the appropriate game_short_name in a CallbackQuery\nTo launch the game, provide the HTML5 Game URL as the url param of answerCallbackQuery\n\nThen, to handle highscores:\n\nUse setGameScore to post high scores in the chat with the game\nUse getGameHighScores to get in-game high score tables\n\nYou can also embed a share button within your game, play around with custom inline buttons, URL parameters and much more. To get a better idea, make sure to check out:\n\nHTML5 Games Manual\nHTML5 Games Bot API Docs\n\n\n\n\n\nCheck out @GameBot and @gamee for examples of what you can do using our Gaming Platform.\n\nStickers and Custom Emoji\nStickers and Custom Emoji are a distinctive Telegram feature used by millions of users to share artwork every day. Stickers and custom emoji take many forms \u2013 ranging from basic images to smooth vector animations and high-detail .WEBM videos.\nAll these formats are supported by our Bot API, which allows bots to create, edit, delete and share new artwork packs on the fly. Telegram's Import API lets users migrate packs from other platforms and sticker apps.\nCreating a new packTo create a new pack, simply:\n\nPrepare your artwork following our technical requirements.\nCreate a new sticker pack via createStickerSet. Set sticker_type to regular to create a sticker pack or to custom emoji to create a pack of custom emoji. Attach the files you wish to include in the pack as an array of InputSticker\nYou can use addStickerToSet to add stickers or emoji later on.\n\nAdditional featuresRegular stickers and custom emoji support keywords that users can type to quickly find the respective artwork \u2013 this can be useful when a sticker doesn't have obvious ties to a specific emoji. You can use the keywords parameter in InputSticker to specify them.\nCustom emoji additionally support adaptive colors \u2013 they will always match the current context (e.g., white on photos, accent color when used as status, etc.); to enable this feature, use the needs_repainting parameter in createStickerSet.\nOnce you're done creating and sharing your artwork, don't forget to check out our remaining sticker methods to find out how to edit, delete and even reorder your pack. \n\nNote that these methods will only work on packs created by the bot that is calling them.\n\nLanguage Support\nBots can tailor their interfaces to support multiple languages \u2013 updating inputs and information on the fly. A user\u2019s language_code is included in every relevant update as an IETF language tag, allowing bots to adapt accordingly. \nWe recommend that you follow our guidelines to provide the best user experience.\n\nYour interfaces, texts and inline results should adapt seamlessly to the language_code, without user intervention.\nConnected WebApps will receive the user's language_code \u2013 your HTML page should account for it.\nHTML5 Games can obtain language information if you specify it as a URL parameter. You can generate this parameter from the language_code field in the User object served with the initial game CallbackQuery.\nThe bot's Name, Description and About text can be natively localized with the respective methods.\nCommand lists can also be specified for individual languages \u2013 more on this here.\n\n\n\n\n\n\n\nThe language_code is an optional field \u2013 it could be empty.If you target the general public, your code should always fall back to either the last recorded language tag or English (in this order) when the field is missing for a specific user. \n\n\nBot Management",
      "ref": {
        "url": "https://core.telegram.org/bots/features#widgets",
        "text": "Inline Login"
      }
    },
    "privacy-mode": {
      "title": "Privacy Mode",
      "description": "Bots are frequently added to groups to perform basic tasks or assist moderators \u2013 like automatically posting company announcements or even celebrating birthdays. By default, all bots added to groups run in Privacy Mode and only see relevant messages and commands:\n\nCommands explicitly meant for them (e.g., /command@this_bot).\nGeneral commands (e.g. /start) if the bot was the last bot to send a message to the group.\nInline messages sent via the bot.\nReplies to any messages implicitly or explicitly meant for this bot.\n\nAll bots will also receive, regardless of privacy mode:\n\nAll service messages.\nAll messages from private chats.\nAll messages from channels where they are a member.\n\nPrivacy mode is enabled by default for all bots, except bots that were added to a group as admins (bot admins always receive all messages). It can be disabled so that the bot receives all messages like an ordinary user (the bot will need to be re-added to the group for this change to take effect). We only recommend doing this in cases where it is absolutely necessary for your bot to work. In most cases, using the force reply option for the bot's messages should be more than enough.\n\n\n\n\nThis mode not only increases user privacy, but also makes the bot more efficient by reducing the number of inputs it needs to process. Users can always see a bot\u2019s current privacy setting in the list of group members.\n\nTesting your bot\nYou can quickly test your bot without interfering with its users by simply running another instance of your code on a different bot account. To do so, create a new bot via @BotFather, obtain its token and use it in the testing instance of your code.\nAll further testing and debugging can happen privately on the new bot, without affecting the original instance.\n\nIf you need to share file references across bots, note that the file_id field is tied to a single bot id, so your test instance cannot use a shared file_id database to quickly send media \u2013 files must be individually reuploaded.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#bot-management",
        "text": "Privacy Mode"
      }
    },
    "dedicated-test-environment": {
      "title": "Dedicated test environment",
      "description": "Telegram also offers a dedicated test environment suitable for more advanced testing. Bots and users in this environment generally have more flexible restrictions \u2013 for example:\n\nWhen working with the test environment, you may use HTTP links without TLS to test your Web Apps or Web Login.\n\n\nFlood limits are not raised in the test environment, and may at times be stricter. To minimize how this impacts your bot, you should make sure that it handles errors with retry policies and does not depend on hardcoded limit values.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#testing-your-bot",
        "text": "Dedicated test environment"
      }
    },
    "creating-a-bot-in-the-test-environment": {
      "title": "Creating a bot in the test environment",
      "description": "The test environment is completely separate from the main environment, so you will need to create a new user account and a new bot with @BotFather.\nTo create an account and log in, use either of the following:\n\niOS: tap 10 times on the Settings icon > Accounts > Login to another account > Test.\nTelegram Desktop: open \u2630 Settings > Shift + Alt + Right click 'Add Account' and select 'Test Server'.\nmacOS: click the Settings icon 10 times to open the Debug Menu, \u2318 + click 'Add Account' and log in via phone number.\n\nAfter logging in, simply create a new bot following the standard procedure and send your requests to the Test Bot API in this format:\nhttps://api.telegram.org/bot<token>/test/METHOD_NAME\n\nWhen working with the test environment, you may use HTTP links without TLS in the url field of both LoginUrl and WebAppInfo.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#dedicated-test-environment",
        "text": "Creating a bot in the test environment"
      }
    },
    "status-alerts": {
      "title": "Status alerts",
      "description": "Millions choose Telegram for its speed. To best benefit users, your bot also needs to be responsive. In order to help developers keep their bots in shape, @BotFather will send status alerts if it sees something is wrong.\nWe check the number of replies and the request/response conversion rate for popular bots (~300 requests per minute, this value may change in the future). If your bot returns an abnormally low number, you will receive a notification from @BotFather.\nResponding to alerts\nBy default, you will only get one alert per bot per hour. \nEach alert has the following buttons:\n\nFixed - Use this if you found an issue with your bot and fixed it. If you press the fix button, we will resume sending alerts in the regular way so that you can see if your fix worked within 5-10 minutes instead of having to wait for an hour.\nSupport - Use this to open a chat with @BotSupport if you don't see any issues with your bot or if you think the problem is on our side.\nMute for 8h/1w - Use this if you can't fix your bot at the moment. This will disable all alerts for the bot in question for the specified period of time. We do not recommend using this option since your users may migrate to a more stable bot. You can unmute alerts in your bot's settings via @BotFather.\n\nMonitored issues\nWe currently notify you about the following issues:\n\nToo few private messages are sent. Value: {value} - Your bot is sending far fewer messages than it did in previous weeks. This is useful for newsletter-style bots that send messages without prompts from users. The larger the value, the more significant the difference.\n\nToo few replies to incoming private messages. Conversion rate: {value} - Your bot is not replying to all messages that are being sent to it (the request/response conversion rate for your bot was too low for at least two of the last three 5-minute periods). \n\n\n\nTo provide a good user experience, please respond to all messages that are sent to your bot. Respond to message updates by calling send\u2026 methods (e.g. sendMessage).\n\n\nToo few answers to inline queries. Conversion rate: {value} - Your bot is not replying to all inline queries that are being sent to it, calculated in the same way as above. Respond to inline_query updates by calling answerInlineQuery.\n\n\nToo few answers to callback queries. Conversion rate: {value}\nToo few answers to callback game queries. Conversion rate: {value} - Your bot is not replying to all callback queries that are being sent to it (with or without games), calculated in the same way as above. Respond to callback_query updates by calling answerCallbackQuery.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#creating-a-bot-in-the-test-environment",
        "text": "Status alerts"
      }
    },
    "local-bot-api": {
      "title": "Local Bot API",
      "description": "You can host and work with your own instance of our open-source Bot API.The source code is available here, along with a quick installation guide.\nAfter installing the server, remember to use the logOut method before redirecting requests to your new local API URL.\n\nYour local instance runs on port 8081 by default and will only accept HTTP requests, so a TLS termination proxy has to be used to handle remote HTTPS requests.\n\nBy hosting our API locally you'll gain access to some upgrades, including:\n\n\n\nAPI\nMax File Download\nMax File Upload\nWHook URL\nWHook Port\nWHook Max Connections\n\n\n\n\nOfficial\n20MB\n50MB\nHTTPS\n443,80,88,8443\n1-100\n\n\nLocal\nUnlimited\n2000MB\nHTTP\nAny port\n1-100000\n\n\n\n\nYou can find an exhaustive list here.All limits may be subject to change in the future, so make sure to follow @BotNews.\n\n\nBotFather\nBelow is a detailed guide to using @BotFather, Telegram\u2019s tool for creating and managing bots.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#status-alerts",
        "text": "Local Bot API"
      }
    },
    "creating-a-new-bot": {
      "title": "Creating a new bot",
      "description": "Use the /newbot command to create a new bot. @BotFather will ask you for a name and username, then generate an authentication token for your new bot.\n\nThe name of your bot is displayed in contact details and elsewhere.\n\nThe username is a short name, used in search, mentions and t.me links. Usernames are 5-32 characters long and not case sensitive \u2013 but may only include Latin characters, numbers, and underscores. Your bot's username must end in 'bot\u2019, like 'tetris_bot' or 'TetrisBot'.\n\nThe token is a string, like 110201543:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw, which is required to authorize the bot and send requests to the Bot API. Keep your token secure and store it safely, it can be used by anyone to control your bot. \n\n\n\nUnlike the bot\u2019s name, the username cannot be changed later \u2013 so choose it carefully.When sending a request to api.telegram.org, remember to prefix the word \u2018bot\u2019 to your token.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#botfather",
        "text": "Creating a new bot"
      }
    },
    "about-text-description-and-profile-media": {
      "title": "About text, description and profile media",
      "description": "When new users open your bot, they will be met with a helpful description in a box titled \u201cWhat can this bot do?\u201d.\nProperly setting this field in @BotFather allows everyone to immediately get an idea of what your bot can do \u2013 your description should be brief, to the point and on topic.\n\nYou can also add a photo or video to this field with Edit Description Picture in @BotFather.\n\nAdditionally, just like normal users, bots also come with a short bio available on their profile. If you didn't specify this field while first creating your bot, you can set it at any time with the /setabouttext command in @BotFather. Users can interact with many bots and they won't have access to their description after starting them \u2013 having a quick reminder of the bot's purpose can be very useful.\n\nNote that both the Description and the About text can be natively localized \u2013 each user will automatically see the correct translation for their language.\n\nBots can also have a profile picture \u2013 you should pick something unique and original so that users can find it in their chat list at a glance.\n\nStarting from April 21, 2023 (Telegram 9.6), you can edit your bot directly from its profile page \u2013 including setting a custom profile video.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#creating-a-new-bot",
        "text": "About text, description and profile media"
      }
    },
    "generating-an-authentication-token": {
      "title": "Generating an authentication token",
      "description": "If your existing token is compromised or you lost it for some reason, use the /token command to generate a new one.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#about-text-description-and-profile-media",
        "text": "Generating an authentication token"
      }
    },
    "transfer-ownership": {
      "title": "Transfer ownership",
      "description": "You can transfer ownership of your bot to another user.To do this, send /mybots, select your bot, then transfer ownership.You can only transfer a bot to users who have interacted with it at least once.\n\nTransferring ownership will give full control of the bot to another user \u2013 they will be able to access the bot\u2019s messages and even delete it. The transfer is permanent, so please consider it carefully.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#generating-an-authentication-token",
        "text": "Transfer ownership"
      }
    },
    "botfather-commands": {
      "title": "BotFather commands",
      "description": "The remaining commands are pretty self-explanatory:\n\n/mybots \u2013 returns a list of your bots with handy controls to edit their settings.\n/mygames \u2013 does the same for your games.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#transfer-ownership",
        "text": "BotFather commands"
      }
    },
    "edit-bots": {
      "title": "Edit bots",
      "description": "To edit your bot, you have two options.\nYou can use the available commands:\n\n/setname \u2013 change your bot's name.\n/setdescription \u2013 change the bot's description (short text up to 512 characters). Users will see this text at the beginning of the conversation with the bot, titled 'What can this bot do?'.\n/setabouttext \u2013 change the bot's about info, a shorter text up to 120 characters. Users will see this text on the bot's profile page. When they share your bot with someone, this text is sent together with the link.\n/setuserpic \u2013 change the bot's profile picture. \n/setcommands \u2013 change the list of commands supported by your bot. Users will see these commands as suggestions when they type / in the chat with your bot. See commands for more info.\n/setdomain \u2013 link a website domain to your bot. See the login widget section.\n/deletebot \u2013 delete your bot and free its username. Cannot be undone.\n\nOr you can use the /mybots command, tap on your bot and use the modern inline interface to edit it.\n\nStarting from April 21, 2023 (Telegram 9.6), you can edit your bot's public-facing info directly from its profile page \u2013 including setting a custom profile video.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#botfather-commands",
        "text": "Edit bots"
      }
    },
    "edit-settings": {
      "title": "Edit settings",
      "description": "/setinline    \u2013 toggle inline mode for your bot.\n/setinlinegeo \u2013 request location data to provide location-based inline results.\n/setjoingroups \u2013 toggle whether your bot can be added to groups or not. All bots must be able to process direct messages, but if your bot was not designed to work in groups, you can disable this.\n/setinlinefeedback \u2013 toggle whether the API should send updates about the results chosen by users. See an in-depth explanation here.\n/setprivacy \u2013 set which messages your bot will receive when added to a group. See privacy-mode for more info.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#edit-bots",
        "text": "Edit settings"
      }
    },
    "manage-games": {
      "title": "Manage games",
      "description": "/newgame    \u2013 create a new game.\n/listgames  \u2013 see a list of your games.\n/editgame   \u2013 edit a game.\n/deletegame \u2013 delete an existing game.\n\n\nPlease note that it may take a few minutes for changes to take effect.\n\n\nWith this information, you are ready to proceed to our Full API Reference for Developers.\n\nIf you have any questions, check out our Bot FAQ.\nIf you're experiencing issues with our API, please contact @BotSupport on Telegram.",
      "ref": {
        "url": "https://core.telegram.org/bots/features#edit-settings",
        "text": "Manage games"
      }
    }
  },
  "x-last-check": "2025-07-19T04:10:18.258024+03:00",
  "x-last-edit": "2025-07-19T04:10:18.258024+03:00"
}